<?xml version="1.0" encoding="UTF-8"?>
<!-- 마이바티스 3 매퍼 DOCTYPE -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="ticket.dao.face.UserDao">
  
  <resultMap type="ticket.dto.User" id="UserMap">
	<result column="user_idx" property="userIdx"/>
	<result column="addr_detail" property="addrDetail"/>
	<result column="create_date" property="createDate"/>
	<result column="m_grade_idx" property="mGradeIdx"/>
	<result column="m_grade" property="mGrade"/>
  </resultMap>
  
  <resultMap type="ticket.dto.StateOfBook" id="SOBMap">
  	<result column="create_date" property="createDate"/>
  	<result column="pfm_start" property="pfmStart"/>
  	<result column="pfm_end" property="pfmEnd"/>
  	<result column="book_idx" property="bookIdx"/>
  	<result column="cancel_date" property="cancelDate"/>
  	<result column="stored_name" property="storedName"/>
  	<result column="hall_name" property="hallName"/>
  	<result column="pfm_date" property="pfmDate"/>
  	<result column="pfm_time" property="pfmTime"/>
  	<result column="imp_uid" property="impUid"/>
  	<result column="book_group" property="bookGroup"/>
  </resultMap>
  
  <resultMap type="ticket.dto.PaymentInfo" id="PaymentInfoMap">
  	<result column="imp_uid" property="impUid"/>
  	<result column="pay_idx" property="payIdx"/>
  </resultMap>
  
  <sql id="selectCnt">
  	SELECT COUNT(*) FROM userinfo
  </sql>
  
  	<select id="selectCntUser" parameterType="ticket.dto.User" resultType="int">
		 SELECT user_idx FROM userinfo
		  where 1=1
		  <if test = "email != null and email != ''">
		  	AND email = #{email}
		  </if>
		  <if test = "password != null and password != ''">
		  	AND password = #{password}
		  </if>
	 </select>
	 
  <select id ="selectUser" parameterType="int" resultMap="UserMap">
  	SELECT 
  		user_idx
		,email
		,nick
		,name
		,sex
		,birth
		,phone
		,addr
		,addr_detail
		,postcode
		,m_grade_idx
		,create_date
		,profile 
  	FROM userinfo 
  	WHERE user_idx = #{userIdx}
  </select>
  
  <select id ="selectUserByEmail" parameterType="String" resultType="int">
  	<include refid="selectCnt"/>
  	WHERE email = #{email }
  </select>
  
    <select id ="selectUserByNick" parameterType="String" resultType="int">
  		<include refid="selectCnt"/>
  		WHERE nick = #{nick }
   </select>
  
  <insert id="insert" parameterType="ticket.dto.User">
 <selectKey  resultType="int" keyProperty="userIdx" order="BEFORE">
  		SELECT USERINFO_SEQ.nextval FROM dual
  	</selectKey>
  
  INSERT INTO userinfo (
	 user_idx
	,email
	,nick
	,password
	,name
	,sex
	,birth
	,phone
	,addr
	,addr_detail
	,postcode
	,m_grade_idx
	,profile
	)
	VALUES ( 
		#{userIdx },#{email } ,#{nick },#{password },#{name },#{sex },#{birth },#{phone }
		,#{addr },#{addrDetail },#{postcode },#{mGradeIdx },#{profile }
	)
  	
  </insert>
  
  
  <select id="selectCntUserBySearch" parameterType="String" resultType="int">
  	SELECT COUNT(*) FROM userinfo
  	<if test = "value != null">
  		WHERE email LIKE '%' || #{value} || '%'
  		OR nick LIKE '%' || #{value} || '%'
  	</if>
  </select>
  
  <select id="selectPagingUserListByPaging" parameterType="ticket.utils.Paging" resultType="ticket.dto.User">
  		SELECT * FROM (
  			SELECT ROWNUM NO, B.* FROM(
  			SELECT u.user_idx as userIdx, u.email, u.nick, sum(p.paid_amount) amount, count(p.paid_amount) totalCnt, u.create_date as createDate, u.m_grade_idx as mGradeIdx
  			FROM userinfo u JOIN payment p
  			ON u.user_idx = p.user_idx(+)
  			<if test = "search != null">
  				WHERE email LIKE '%' || #{search} || '%'
  				OR nick LIKE '%' || #{search} || '%'
  			</if>
  			GROUP BY u.user_idx, u.email, u.nick, u.create_date, u.m_grade_idx
  			ORDER BY u.create_date) B
  		)
  		WHERE no between #{startNo} AND #{endNo}
  </select>
  
  <update id="updateUserGrade">
		UPDATE userinfo
		SET m_grade_idx = #{currUserGrade}
		WHERE user_idx = #{currUser}
  </update>
  
   <select id="selectSOB" parameterType="ticket.dto.User" resultMap="SOBMap">
	  	SELECT
		    b.create_date, p.name, p.pfm_start, p.pfm_end, b.book_group, b.cancel_date,
		    bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time
		FROM
		    book b
		    JOIN performance p ON b.pfm_idx = p.pfm_idx
		    JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
		    JOIN hall h ON p.hall_idx = h.hall_idx
		    JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
		    JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
		WHERE
		    b.user_idx = #{userIdx}
		GROUP BY
		    b.create_date, p.name, p.pfm_start, p.pfm_end, b.book_group, b.cancel_date,
		    bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time
		ORDER BY b.create_date
  </select>
  
  <select id="selectUserGrade" parameterType="ticket.dto.User" resultMap="UserMap">
  		SELECT * 
		FROM USERINFO U JOIN MEMBER_GRADE G
		ON U.M_GRADE_IDX = G.M_GRADE_IDX
		WHERE U.USER_IDX = #{userIdx}
  </select>
  
  <select id="selectCntSobBySearch" parameterType="String" resultType="int">
  		
  </select>
  
  <select id="selectSobListByPaging" parameterType="ticket.utils.Paging" resultMap="SOBMap">
  
  </select>
  

  <select id="selectImpUidByBookGroup" parameterType="String" resultMap="PaymentInfoMap">
		SELECT
		    b.imp_uid,
		    p.pay_idx
		FROM
		    book b
		    JOIN payment p ON b.imp_uid = p.imp_uid
		WHERE
		    book_group = #{value}
		    AND book_cate_idx = 3
  </select>

  <select id="selectPwByUserIdx" parameterType="ticket.dto.User" resultType="String"> 
  	SELECT password 
  	FROM userinfo 
  	WHERE user_idx= #{userIdx }
  </select>
  


  </mapper>
  
  
  
  
  