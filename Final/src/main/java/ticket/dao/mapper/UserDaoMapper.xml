<?xml version="1.0" encoding="UTF-8"?>
<!-- 마이바티스 3 매퍼 DOCTYPE -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="ticket.dao.face.UserDao">
  
  <resultMap type="ticket.dto.User" id="UserMap">
	<result column="user_idx" property="userIdx"/>
	<result column="addr_detail" property="addrDetail"/>
	<result column="create_date" property="createDate"/>
	<result column="m_grade_idx" property="mGradeIdx"/>
	<result column="m_grade" property="mGrade"/>
  </resultMap>
  
  <resultMap type="ticket.dto.StateOfBook" id="SOBMap">
  	<result column="user_idx" property="userIdx"/>
  	<result column="create_date" property="createDate"/>
  	<result column="pfm_start" property="pfmStart"/>
  	<result column="pfm_end" property="pfmEnd"/>
  	<result column="pfm_idx" property="pfmIdx"/>
  	<result column="book_idx" property="bookIdx"/>
  	<result column="cancel_date" property="cancelDate"/>
  	<result column="stored_name" property="storedName"/>
  	<result column="hall_name" property="hallName"/>
  	<result column="pfm_date" property="pfmDate"/>
  	<result column="pfm_time" property="pfmTime"/>
  	<result column="imp_uid" property="impUid"/>
  	<result column="book_group" property="bookGroup"/>
  </resultMap>
  
  <resultMap type="ticket.dto.PaymentInfo" id="PaymentInfoMap">
  	<result column="imp_uid" property="impUid"/>
  	<result column="pay_idx" property="payIdx"/>
  	<result column="seat_idx" property="seatIdx"/>
  	<result column="sec_pay" property="secPay"/>
  	<result column="paid_amount" property="paidAmount"/>
  	<result column="pay_method" property="payMethod"/>
  	<result column="create_date" property="createDate"/>
  	<result column="user_idx" property="userIdx"/>
  	<result column="buyer_name" property="buyerName"/>
  </resultMap>
  
  <resultMap type="ticket.dto.Shipment" id="Shipment">
  	<result column="ship_idx" property="shipIdx"/>
  	<result column="book_group" property="bookGroup"/>
  	<result column="addr_detail" property="addrDetail"/>
  </resultMap>
  
  <resultMap type="ticket.dto.SeatSection" id="SeatSection">
  	<result column="sec_idx" property="secIdx"/>
  	<result column="hall_idx" property="hallIdx"/>
  	<result column="pfm_idx" property="pfmIdx"/>
  	<result column="ori_sec_idx" property="oriSecIdx"/>
  	<result column="app_sec" property="appSec"/>
  	<result column="sec_pay" property="secPay"/>
  	<result column="ori_sec_name" property="oriSecName"/>
  	<result column="create_date" property="createDate"/>
  	
  </resultMap>
  
  <resultMap type="ticket.dto.Seat" id="Seat">
  	<result column="seat_idx" property="seatIdx"/>
  	<result column="seat_row" property="seatRow"/>
  	<result column="seat_col" property="seatCol"/>
  	<result column="ori_sec_idx" property="oriSecIdx"/>
  	<result column="hall_idx" property="hallIdx"/>
  	<result column="seat_floor" property="seatFloor"/>
  	<result column="book_idx" property="bookIdx"/>
  	<result column="pfm_dbt_idx" property="pfmDbtIdx"/>
  	<result column="state" property="state"/>
  </resultMap>
  
  <sql id="selectCnt">
  	SELECT COUNT(*) FROM userinfo
  </sql>
  
  	<select id="selectCntUser" parameterType="ticket.dto.User" resultType="int">
		 SELECT NVL(MAX(user_idx), 0)user_idx FROM userinfo
		  where 1=1
		  <if test = "email != null and email != ''">
		  	AND email = #{email}
		  </if>
		  <if test = "password != null and password != ''">
		  	AND password = #{password}
		  </if>
	 </select>
	 
  <select id ="selectUser" parameterType="int" resultMap="UserMap">
  	SELECT 
  		user_idx
		,email
		,nick
		,name
		,sex
		,birth
		,phone
		,addr
		,addr_detail
		,postcode
		,m_grade_idx
		,create_date
		,profile 
  	FROM userinfo 
  	WHERE user_idx = #{userIdx}
  </select>
  
  <select id ="selectUserByEmail" parameterType="String" resultType="int">
  	<include refid="selectCnt"/>
  	WHERE email = #{email }
  </select>
  
    <select id ="selectUserByNick" parameterType="String" resultType="int">
  		<include refid="selectCnt"/>
  		WHERE nick = #{nick }
   </select>
  
  <insert id="insert" parameterType="ticket.dto.User">
 <selectKey  resultType="int" keyProperty="userIdx" order="BEFORE">
  		SELECT USERINFO_SEQ.nextval FROM dual
  	</selectKey>
  
  INSERT INTO userinfo (
	 user_idx
	,email
	,nick
	,password
	,name
	,sex
	,birth
	,phone
	,addr
	,addr_detail
	,postcode
	,m_grade_idx
	,profile
	)
	VALUES ( 
		#{userIdx },#{email } ,#{nick },#{password },#{name },#{sex },#{birth },#{phone }
		,#{addr },#{addrDetail },#{postcode },1,#{profile }
	)
  	
  </insert>
  
  
  <select id="selectCntUserBySearch" parameterType="String" resultType="int">
  	SELECT COUNT(*) FROM userinfo
  	<if test = "value != null">
  		WHERE email LIKE '%' || #{value} || '%'
  		OR nick LIKE '%' || #{value} || '%'
  	</if>
  </select>
  
  <select id="selectPagingUserListByPaging" parameterType="ticket.utils.Paging" resultType="ticket.dto.User">
  		SELECT * FROM (
  			SELECT ROWNUM NO, B.* FROM(
  			SELECT u.user_idx as userIdx, u.email, u.nick, sum(p.paid_amount) amount, count(p.paid_amount) totalCnt, u.create_date as createDate, u.m_grade_idx as mGradeIdx
  			FROM userinfo u JOIN payment p
  			ON u.user_idx = p.user_idx(+)
  			<if test = "search != null">
  				WHERE email LIKE '%' || #{search} || '%'
  				OR nick LIKE '%' || #{search} || '%'
  			</if>
  			GROUP BY u.user_idx, u.email, u.nick, u.create_date, u.m_grade_idx
  			ORDER BY u.create_date) B
  		)
  		WHERE no between #{startNo} AND #{endNo}
  </select>
  
  <update id="updateUserGrade">
		UPDATE userinfo
		SET m_grade_idx = #{currUserGrade}
		WHERE user_idx = #{currUser}
  </update>
  
   <select id="selectSOB" parameterType="ticket.dto.User" resultMap="SOBMap">
        SELECT TEST.*, COUNT(state) as ea FROM (
            SELECT
                trunc(b.create_date, 'dd') create_date, u.user_idx, p.pfm_idx, p.name, p.pfm_start, p.pfm_end, b.book_group, trunc(b.cancel_date, 'dd') cancel_date,
                bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time
            FROM
                book b 
                JOIN performance p ON b.pfm_idx = p.pfm_idx
                JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
                JOIN hall h ON p.hall_idx = h.hall_idx
                JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
                JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
                JOIN userinfo u ON b.user_idx = u.user_idx
            WHERE
                b.user_idx = #{userIdx}
        ) TEST
		GROUP BY
		    create_date, name, user_idx, pfm_start, pfm_end, book_group, cancel_date,
		    state, stored_name, hall_name, pfm_date, pfm_time,pfm_idx
		ORDER BY create_date
  </select>
  
  <select id="selectUserGrade" parameterType="ticket.dto.User" resultMap="UserMap">
  		SELECT * 
		FROM USERINFO U JOIN MEMBER_GRADE G
		ON U.M_GRADE_IDX = G.M_GRADE_IDX
		WHERE U.USER_IDX = #{userIdx}
  </select>
  
  <select id="selectCntSobBySearch" parameterType="String" resultType="int">
  		
  </select>
  
  <select id="selectSobListByPaging" parameterType="ticket.utils.Paging" resultMap="SOBMap">
  		SELECT * 
  		FROM ( SELECT ROWNUM AS no, test2.*  
  		FROM ( SELECT
		    test.*,
		    COUNT(state) AS ea
		FROM ( SELECT
		    u.user_idx, trunc(b.create_date,'dd') create_date,
		    u.email, u.nick, p.name, p.pfm_start, p.pfm_end, b.book_group,
		    trunc(b.cancel_date,'dd') cancel_date, bc.state,pi.stored_name,
		    h.hall_name, pd.pfm_date, pd.pfm_time
		FROM
		    book b
		    JOIN performance p ON b.pfm_idx = p.pfm_idx
		    JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
		    JOIN hall h ON p.hall_idx = h.hall_idx
		    JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
		    JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
		    JOIN userinfo u ON b.user_idx = u.user_idx
			<if test = "search != null">
		  		WHERE p.name LIKE '%' || #{search} || '%'
		  		OR u.nick LIKE '%' || #{search} || '%'
		  	</if>
		    ) test
		GROUP BY 
		    create_date, email, nick, user_idx,
		    name, pfm_start, pfm_end, book_group,
		    cancel_date, state, stored_name,
		    hall_name, pfm_date, pfm_time
		    ORDER by user_idx DESC ) test2 
		)
		WHERE no between #{startNo} AND #{endNo}
		
  </select>
  

  <select id="selectImpUidByBookGroup" parameterType="String" resultMap="PaymentInfoMap">
		SELECT
		    b.imp_uid,
		    p.pay_idx,
		    b.seat_idx,
		    ss.sec_pay,
		    p.paid_amount
		FROM
		    book b
		    JOIN payment p ON b.imp_uid = p.imp_uid
		    JOIN seat s ON b.seat_idx = s.seat_idx
		    JOIN seatsection ss ON s.ori_sec_idx = ss.ori_sec_idx
		WHERE
		    b.book_group = #{value}
		    AND b.book_cate_idx = 3
		ORDER BY
		    p.pay_idx
  </select>

  <select id="selectPwByUserIdx" parameterType="ticket.dto.User" resultType="String"> 
  	SELECT password 
  	FROM userinfo 
  	WHERE user_idx= #{userIdx }
  </select>
  
	 <update id="updateNick" parameterType="ticket.dto.User">
	 	UPDATE  userinfo 
		SET nick = #{nick }
		WHERE user_idx= #{userIdx }
	 </update>
	  
	
	 <update id="updatePass" parameterType="ticket.dto.User">
	 	UPDATE  userinfo 
		SET password = #{password }
		WHERE email= #{email }
	 </update>
	 
	  <update id="updatePhone" parameterType="ticket.dto.User">
	 	UPDATE  userinfo 
		SET phone = #{phone }
		WHERE user_idx= #{userIdx }
	 </update>
	 
	  <update id="updateAddr" parameterType="ticket.dto.User">
	 	UPDATE  userinfo 
		SET 
			postcode = #{postcode }
			,addr = #{addr }
			
			<if test="addrDetail != null">
			,addr_detail = #{addrDetail }
			</if>
		WHERE user_idx= #{userIdx }
	 </update>
	 
	 
	 <select id="selectEmailByNameAndPhone" parameterType="ticket.dto.User" resultType="String">
	 	SELECT email FROM userinfo WHERE name = #{name } AND phone = #{phone }
	 </select>
	 
	 
	 <update id="updateProfile" parameterType="ticket.dto.User">
	 	UPDATE userinfo 
	 	SET profile =#{profile }
	 	WHERE user_idx = #{userIdx }
	 </update>

	<delete id="deleteBook" parameterType="ticket.dto.PaymentInfo">
		DELETE book
		WHERE seat_idx = #{seatIdx}
	</delete>

	<delete id="deleteSeat" parameterType="ticket.dto.PaymentInfo">
		DELETE seat
		WHERE seat_idx = #{seatIdx}
	</delete>
	
	<select id="selectTotalSob" resultType="int" parameterType="String">
		SELECT COUNT(*) 
		FROM (SELECT
		    test.*,
		    COUNT(state) AS ea
		FROM ( SELECT
		    u.user_idx, trunc(b.create_date,'dd') create_date,
		    u.email, u.nick, p.name, p.pfm_start, p.pfm_end, b.book_group,
		    trunc(b.cancel_date,'dd') cancel_date, bc.state,pi.stored_name,
		    h.hall_name, pd.pfm_date, pd.pfm_time
		FROM
		    book b
		    JOIN performance p ON b.pfm_idx = p.pfm_idx
		    JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
		    JOIN hall h ON p.hall_idx = h.hall_idx
		    JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
		    JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
		    JOIN userinfo u ON b.user_idx = u.user_idx
			<if test = "value != null">
		  		WHERE p.name LIKE '%' || #{value} || '%'
		  		OR u.nick LIKE '%' || #{value} || '%'
		  	</if>
		    ) test
		GROUP BY 
		    create_date, email, nick, user_idx,
		    name, pfm_start, pfm_end, book_group,
		    cancel_date, state, stored_name,
		    hall_name, pfm_date, pfm_time
		    ORDER by user_idx DESC)
  </select>

	<select id="selectBook" parameterType="hashmap" resultMap="SOBMap">
    SELECT TEST.*, COUNT(state) as ea FROM (
            SELECT
                trunc(b.create_date, 'dd') create_date, p.pfm_idx, p.name, p.pfm_start, p.pfm_end, b.book_group, trunc(b.cancel_date, 'dd') cancel_date,
                bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time, b.imp_uid
            FROM
                book b 
                JOIN performance p ON b.pfm_idx = p.pfm_idx
                JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
                JOIN hall h ON p.hall_idx = h.hall_idx
                JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
                JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
            WHERE
                b.user_idx = #{userIdx} AND p.pfm_idx =#{pfmIdx} AND B.book_cate_idx IN(2,3)
        ) TEST
		GROUP BY
		    create_date, name, pfm_start, pfm_end, book_group, cancel_date,
		    state, stored_name, hall_name, pfm_date, pfm_time,pfm_idx, imp_uid
		ORDER BY create_date

	</select>
	
	<select id="selectReceive" parameterType="String" resultType="int">
		SELECT DISTINCT receive_idx FROM book WHERE book_group =#{bookGroup }
	</select>
	
	<select id="selectShipmet" parameterType="String" resultMap="Shipment">
		SELECT * FROM shipment WHERE book_group =#{bookGroup }
	</select>
	
	<select id="selectSeat" parameterType="String" resultMap="SeatSection">
		SELECT 
			DISTINCT app_sec, sec_pay, A.pfm_idx
			from seatsection A
			JOIN originsection B
			 ON A.ori_sec_idx = B.ori_sec_idx
			JOIN SEAT C
			 ON b.ori_sec_idx = c.ori_sec_idx
			JOIN BOOK D
			 ON D.seat_idx = C.seat_idx AND A.pfm_idx = D.pfm_idx
		WHERE d.book_group = #{bookGroup }
	</select>
	
	<select id="selectPaymentByimpUid" parameterType="String" resultMap="PaymentInfoMap">
		SELECT * 
		FROM payment 
		WHERE imp_uid = #{impUid }
	
	</select>
	
	
	<select id="selectSeatByBookGroup" parameterType="String" resultMap="Seat">
      SELECT S.seat_idx,S.seat_row,S.seat_col,S.ori_sec_idx,S.seat_floor,S.hall_idx, B.book_idx ,PD.pfm_dbt_idx, BC.state  
        FROM seat S
        INNER JOIN book B
            ON S.seat_idx = B.seat_idx
        INNER JOIN book_cate BC
            ON BC.book_cate_idx = B.book_cate_idx
        INNER JOIN PFM_DATEBYTIME PD
            ON PD.pfm_dbt_idx = B.pfm_dbt_idx
                AND b.pfm_idx = pd.pfm_idx
        WHERE S.seat_idx IN( ( SELECT seat_idx FROM book WHERE book_group=#{bookGroup }) )
	</select>
	
	
	<update id="updateStateCancel" parameterType="String">
		UPDATE book 
		SET book_cate_idx =4,
			cancel_date=sysdate 
		WHERE book_idx IN (${_parameter })
	</update>
	
	<update id="updateState" parameterType="String">
		UPDATE book 
		SET book_cate_idx =3 
		WHERE book_idx NOT IN (${_parameter }) AND book_cate_idx =2
	</update>
	
	<select id ="selectCancelSeat" resultMap="SeatSection" parameterType="String">
		SELECT app_sec, sec_pay, A.pfm_idx
		from seatsection A
		JOIN originsection B
		 ON A.ori_sec_idx = B.ori_sec_idx
		JOIN SEAT C
		 ON b.ori_sec_idx = c.ori_sec_idx
		JOIN BOOK D
		 ON D.seat_idx = C.seat_idx AND A.pfm_idx = D.pfm_idx
		WHERE D.book_idx IN (${_parameter })
				
	
	</select>
	
	<select id="selectCancelTicket" parameterType="ticket.dto.User" resultMap="SOBMap">
	SELECT TEST.*, COUNT(state) as ea FROM (
            SELECT
                trunc(b.create_date, 'dd') create_date, p.pfm_idx, p.name, p.pfm_start, p.pfm_end, b.book_group, 
                bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time, b.imp_uid
            FROM
                book b 
                JOIN performance p ON b.pfm_idx = p.pfm_idx
                JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
                JOIN hall h ON p.hall_idx = h.hall_idx
                JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
                JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
            WHERE
                b.user_idx = #{userIdx } 
                AND b.book_group 
                IN (
                 select book_group
                from (
                    select distinct book_group, book_cate_idx
                    from book
                    where book_cate_idx IN (3,4,5)
                    ) A
                group by book_group
                having count(book_cate_idx) = 1
                )
        ) TEST
		GROUP BY
		    create_date, name, pfm_start, pfm_end, book_group,
		    state, stored_name, hall_name, pfm_date, pfm_time,pfm_idx, imp_uid
		ORDER BY create_date

	</select>
	
	<select id="selectCntBook" parameterType="int" resultType="int">
	SELECT COUNT (*) book FROM (
    SELECT TEST.*, COUNT(state) as ea FROM (
            SELECT
                trunc(b.create_date, 'dd') create_date, p.pfm_idx, p.name, p.pfm_start, p.pfm_end, b.book_group, trunc(b.cancel_date, 'dd') cancel_date,
                bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time, b.imp_uid
            FROM
                book b 
                JOIN performance p ON b.pfm_idx = p.pfm_idx
                JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
                JOIN hall h ON p.hall_idx = h.hall_idx
                JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
                JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
            WHERE
                b.user_idx = 1 AND B.book_cate_idx IN(2,3)
        ) TEST
		GROUP BY
		    create_date, name, pfm_start, pfm_end, book_group, cancel_date,
		    state, stored_name, hall_name, pfm_date, pfm_time,pfm_idx, imp_uid
		ORDER BY create_date)
	
	
	</select>
	
	<select id="selectCntCancelBook" parameterType="int" resultType="int">
	SELECT COUNT(*) cancel FROM (
	SELECT TEST.*, COUNT(state) as ea FROM (
            SELECT
                trunc(b.create_date, 'dd') create_date, p.pfm_idx, p.name, p.pfm_start, p.pfm_end, b.book_group, 
                bc.state, pi.stored_name, h.hall_name, pd.pfm_date, pd.pfm_time, b.imp_uid
            FROM
                book b 
                JOIN performance p ON b.pfm_idx = p.pfm_idx
                JOIN poster_info pi ON p.pfm_idx = pi.pfm_idx
                JOIN hall h ON p.hall_idx = h.hall_idx
                JOIN pfm_datebytime pd ON b.pfm_dbt_idx = pd.pfm_dbt_idx
                JOIN book_cate bc ON b.book_cate_idx = bc.book_cate_idx
            WHERE
                b.user_idx = #{userIdx } 
                AND b.book_group 
                IN (
                 select book_group
                from (
                    select distinct book_group, book_cate_idx
                    from book
                    where book_cate_idx IN (3,4,5)
                    ) A
                group by book_group
                having count(book_cate_idx) = 1
                )
        ) TEST
		GROUP BY
		    create_date, name, pfm_start, pfm_end, book_group,
		    state, stored_name, hall_name, pfm_date, pfm_time,pfm_idx, imp_uid
		ORDER BY create_date)
	
	</select>
	
	
  </mapper>
  
  
  
  
  